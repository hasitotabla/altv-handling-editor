var app=function(){"use strict";function e(){}function t(e){return e()}function n(){return Object.create(null)}function r(e){e.forEach(t)}function a(e){return"function"==typeof e}function i(e,t){return e!=e?t==t:e!==t||e&&"object"==typeof e||"function"==typeof e}function o(e){return null==e?"":e}function s(e,t){e.appendChild(t)}function l(e,t,n){e.insertBefore(t,n||null)}function c(e){e.parentNode&&e.parentNode.removeChild(e)}function u(e){return document.createElement(e)}function h(e){return document.createTextNode(e)}function f(){return h(" ")}function b(e,t,n,r){return e.addEventListener(t,n,r),()=>e.removeEventListener(t,n,r)}function d(e,t,n){null==n?e.removeAttribute(t):e.getAttribute(t)!==n&&e.setAttribute(t,n)}function g(e,t){e.value=null==t?"":t}let m;function p(e){m=e}const v=[],w=[];let y=[];const k=[],$=Promise.resolve();let x=!1;function M(e){y.push(e)}const V=new Set;let D=0;function j(){if(0!==D)return;const e=m;do{try{for(;D<v.length;){const e=v[D];D++,p(e),B(e.$$)}}catch(e){throw v.length=0,D=0,e}for(p(null),v.length=0,D=0;w.length;)w.pop()();for(let e=0;e<y.length;e+=1){const t=y[e];V.has(t)||(V.add(t),t())}y.length=0}while(v.length);for(;k.length;)k.pop()();x=!1,V.clear(),p(e)}function B(e){if(null!==e.fragment){e.update(),r(e.before_update);const t=e.dirty;e.dirty=[-1],e.fragment&&e.fragment.p(e.ctx,t),e.after_update.forEach(M)}}const C=new Set;function T(e,t){const n=e.$$;null!==n.fragment&&(!function(e){const t=[],n=[];y.forEach((r=>-1===e.indexOf(r)?t.push(r):n.push(r))),n.forEach((e=>e())),y=t}(n.after_update),r(n.on_destroy),n.fragment&&n.fragment.d(t),n.on_destroy=n.fragment=null,n.ctx=[])}function _(e,t){-1===e.$$.dirty[0]&&(v.push(e),x||(x=!0,$.then(j)),e.$$.dirty.fill(0)),e.$$.dirty[t/31|0]|=1<<t%31}function R(i,o,s,l,u,h,f,b=[-1]){const d=m;p(i);const g=i.$$={fragment:null,ctx:[],props:h,update:e,not_equal:u,bound:n(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(o.context||(d?d.$$.context:[])),callbacks:n(),dirty:b,skip_bound:!1,root:o.target||d.$$.root};f&&f(g.root);let v=!1;if(g.ctx=s?s(i,o.props||{},((e,t,...n)=>{const r=n.length?n[0]:t;return g.ctx&&u(g.ctx[e],g.ctx[e]=r)&&(!g.skip_bound&&g.bound[e]&&g.bound[e](r),v&&_(i,e)),t})):[],g.update(),v=!0,r(g.before_update),g.fragment=!!l&&l(g.ctx),o.target){if(o.hydrate){const e=function(e){return Array.from(e.childNodes)}(o.target);g.fragment&&g.fragment.l(e),e.forEach(c)}else g.fragment&&g.fragment.c();o.intro&&((w=i.$$.fragment)&&w.i&&(C.delete(w),w.i(y))),function(e,n,i,o){const{fragment:s,after_update:l}=e.$$;s&&s.m(n,i),o||M((()=>{const n=e.$$.on_mount.map(t).filter(a);e.$$.on_destroy?e.$$.on_destroy.push(...n):r(n),e.$$.on_mount=[]})),l.forEach(M)}(i,o.target,o.anchor,o.customElement),j()}var w,y;p(d)}class S{$destroy(){T(this,1),this.$destroy=e}$on(t,n){if(!a(n))return e;const r=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return r.push(n),()=>{const e=r.indexOf(n);-1!==e&&r.splice(e,1)}}$set(e){var t;this.$$set&&(t=e,0!==Object.keys(t).length)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}}const F={acceleration:"",antiRollBarBiasFront:"The bias between front and rear for the antiroll bar. (0 front, 1 rear)",antiRollBarBiasRear:"",antiRollBarForce:"The spring constant that is transmitted to the opposite wheel when under compression larger numbers are a larger force.</br>Larger Numbers = less body roll",brakeBiasFront:"This line controls the distribution of braking force between the front and rear axles.</br></br>\n  Values: (Similar to fDriveBiasFront)</br></br>\n  - <b>0.0 means the rear axle only receives brake force.</b></br>\n  - <b>1.0 means the front axle only receives brake force.</b></br>\n  - <b>0.5 gives both axles equal brake force.</b></br>\n  - <b>Values between 0.01 and 0.49 means the rear axle will receive more brake force.</b></br>\n  - <b>Values between 0.51 and 0.99 means the front axles will receive more brake force than the rear.</b>",brakeBiasRear:"",brakeForce:"Obvious one. Multiplies the game's calculation of deceleration.</br></br>\n  - <b>Bigger numbers = harder braking.</b></br></br>\n  Values: 0.01 - 2.0 and above.</br></br>\n  - <b>1.0 uses brake force calculation unmodified.</b>",camberStiffnesss:"How much the vehicle is pushed towards its roll direction. Road camber also affects roll and applied forces.</br>Values smaller than 0.0 or greater than 1.0 create unrealistic forces.",centreOfMassOffset:"Shifts the center of gravity in meters from side to side.<br/><br/>\n  Values: (0 means that the center of gravity will be in the center of the vehicle.)<br/><br/>\n  - <b>X: -10.0 to 10.0. Positive values move the center of gravity right.</b><br/>\n  - <b>Y: -10.0 to 10.0. Positive values move the center of gravity forwards.</b><br/>\n  - <b>Z: -10.0 to 10.0. Positive values move the center of gravity upwards.</b>",clutchChangeRateScaleDownShift:"Clutch speed multiplier on down shifts. (Bigger numbers = faster shifts)",clutchChangeRateScaleUpShift:"Clutch speed multiplier on up shifts. (Bigger numbers = faster shifts)",collisionDamageMult:"Multiplies the game's calculation of damage to the vehicle by collision.",damageFlags:"",deformationDamageMult:"Multiplies the game's calculation of deformation damage.",downforceModifier:"",driveBiasFront:"This is used to determine whether a vehicle is front, rear, or four wheel drive. (0.0 = rear wheel drive, 0.5 = 4 wheel drive, 1.0 = front wheel drive. Any value between 0.01 and 0.99 is four wheel drive.)",driveInertia:"Describes how fast an engine will rev. Values: 0.01 - 2.0.",driveMaxFlatVel:"This determines the vehicle speed at redline in the top gear (not the show).",engineDamageMult:"Multiplies the game's calculation of damage to the engine, causing explosion or engine failure. (Values for the above four: 0.0 - 10.0.)",handBrakeForce:"Another obvious one. Braking power of the handbrake. Bigger numbers = harder braking. (Values: 0.0<)",handlingFlags:"",inertiaMultiplier:"",initialDragCoeff:"Sets the drag coefficient of the vehicle. Increase to simulate aerodynamic drag. (Value: 10-120)",initialDriveForce:"This modifies the game's calculation of drive force (from the output of the transmission). (Values: 0.01 - 2.0 and above.)",initialDriveGears:"Obviously, this line determines how many forward speeds/gears a vehicle's transmission contains. (Values: 1 or more.)",initialDriveMaxFlatVel:"This determines the vehicle speed at redline in the top gear (not the show).",lowSpeedTractionLossMult:"How much traction is reduced at low speed.</br></br>\n  <b>- 0.0 means normal traction. It affects mainly car burnout when pressing gas (W/UP).</b></br></br>\n  <b>- Decreasing value will cause less burnout, less sliding at start.</b></br></br>\n  <b>- Higher value will cause more burnout.</b>",mass:"This is the weight of the vehicle in kilograms. Only used when the vehicle collides with another vehicle or non-static object.",modelFlags:"",monetaryValue:"",oilVolume:"Amount of oil.",percentSubmerged:'The percentage of the vehicle\'s "floating height" after it falls into the water, before sinking.</br></br>\n  - <b>Default - 85% for vanilla, land vehicles. The value will stop sinking the vehicle to float for a moment before sinking. Boats excluded.</b></br></br>\n  - <b>Value: Any percentage. Should be given in decimal. Example: 0.70 (70%)</b></br></br>\n  - <b>An invalid number will cause the vehicle to sink without the driver drowning.</b>',percentSubmergedRatio:"",petrolTankVolume:"Amount of petrol that will leak after damaging a vehicle's tank.",rollCentreHeightFront:"Larger Numbers = less rollovers.",rollCentreHeightRear:"This value modify the weight transmission during an acceleration between the front and rear. high positive value can make your car able to do wheelies. <b>Larger Numbers = less rollovers</b>",seatOffsetDistX:"Value: Driver > passenger",seatOffsetDistY:"Value: Trunk > hood",seatOffsetDistZ:"Value: Undercarriage > roof",steeringLock:"This multiplies the game's calculation of the <b>angle of the steer wheel</b> will turn while at full turn. Steering lock is directly related to over/under-steer.<br/><br/>\n  - <b>Values between 0.1 - 0.2 will simulate a long wheelbase.</b><br/><br/>\n  - <b>Values around 0.75 and above will turn extremely fast. Higher values will cause the vehicle to spin out easily.</b>",steeringLockRatio:"",suspensionBiasFront:"This value determines which suspension is stronger, front or rear.<br/><br/>\n  - <b>If value is above 0.50 then front is stiffer, when below, rear is stiffer.</b><br/><br/>",suspensionBiasRear:"",suspensionCompDamp:"Damping during strut compression. (Bigger values = stiffer)",suspensionForce:"Affects how strong suspension is.</br></br>\n  <b>1/(Force x Wheels) = Lower limit for zero force at full extension.</b>",suspensionLowerLimit:"Visual limit of how far can wheels move up / down from original position.",suspensionRaise:"The amount that the suspension raises the body off the wheels.",suspensionReboundDamp:"Damping during strut rebound.</br></br>\n  <b>Bigger values = stiffer.</b>",suspensionUpperLimit:"",tractionBiasFront:"Determines the distribution of traction from front to rear.</br></br>\n  Values: 0.01 - 0.99.</br></br>\n  - <b>0.01 = only rear axle has traction.</b><br/><br>\n  - <b>0.99 = only front axle has traction.</b><br/><br>\n  - <b>0.5 = both axles have equal traction.</b><br/><br>\n  - <b>Entering a value of 0.0 or 1.0 causes the vehicle to have no traction.</b>",tractionBiasRear:"",tractionCurveLateral:"Shape of lateral traction curve.",tractionCurveLateralRatio:"",tractionCurveMax:"Cornering grip of the vehicle as a multiplier of the tire surface friction.",tractionCurveMaxRatio:"",tractionCurveMin:"Accelerating/braking grip of the vehicle as a multiplier of the tire surface friction.",tractionCurveMinRatio:"",tractionLossMult:"Affects how much grip is changed when driving on asphalt and mud.</br></br>\n  <b>Higher values make the car less responsive and prone to sliding.</b>",tractionSpringDeltaMax:"This value determines at what distance <b>above the ground</b> the car will <b>lose traction</b>.",tractionSpringDeltaMaxRatio:"",weaponDamageMult:"Multiplies the game's calculation of damage to the vehicle by weapons."};function L(e,t,n){const r=e.slice();return r[13]=t[n][0],r[14]=t[n][1],r[15]=t,r[16]=n,r}function O(e){let t,n,a,i,o,m,p,v,w=e[13]+"";function y(){return e[7](e[13])}function k(){return e[9](e[13])}function $(){e[10].call(o,e[13])}return{c(){t=u("div"),n=u("p"),a=h(w),i=f(),o=u("input"),m=f(),d(n,"class","item-name svelte-1cjsccl"),d(o,"type","text"),d(o,"class","svelte-1cjsccl"),d(t,"class","item svelte-1cjsccl")},m(r,c){l(r,t,c),s(t,n),s(n,a),s(t,i),s(t,o),g(o,e[1][e[13]].value),s(t,m),p||(v=[b(n,"mouseover",y),b(n,"mouseleave",e[8]),b(o,"change",k),b(o,"input",$)],p=!0)},p(t,n){e=t,2&n&&w!==(w=e[13]+"")&&function(e,t){t=""+t,e.data!==t&&(e.data=t)}(a,w),2&n&&o.value!==e[1][e[13]].value&&g(o,e[1][e[13]].value)},d(e){e&&c(t),p=!1,r(v)}}}function A(e){let t;return{c(){t=u("div"),d(t,"class","tooltip-text svelte-1cjsccl")},m(n,r){l(n,t,r),t.innerHTML=e[2]},p(e,n){4&n&&(t.innerHTML=e[2])},d(e){e&&c(t)}}}function E(t){let n,a,i,g,m,p,v,w,y,k,$,x,M,V,D,j,B,C,T,_=Object.entries(t[1]),R=[];for(let e=0;e<_.length;e+=1)R[e]=O(L(t,_,e));let S="string"==typeof t[2]&&""!==t[2]&&A(t);return{c(){n=u("div"),a=u("h1"),a.textContent="Handling Editor",i=f(),g=u("div");for(let e=0;e<R.length;e+=1)R[e].c();m=f(),p=u("div"),v=u("p"),w=h("Made by\n      "),y=u("span"),y.textContent="@szkiddaj",k=h(" with ✨ and 👺"),$=f(),x=u("div"),M=u("button"),M.textContent="Reset",V=f(),D=u("button"),D.textContent="Save",j=f(),S&&S.c(),d(a,"class","header svelte-1cjsccl"),d(g,"class","items svelte-1cjsccl"),d(y,"class","author-name svelte-1cjsccl"),d(v,"class","author svelte-1cjsccl"),d(M,"class","svelte-1cjsccl"),d(D,"class","svelte-1cjsccl"),d(x,"class","controls"),d(p,"class","footer svelte-1cjsccl"),d(n,"class",B=o("container "+(t[0]?"":"hide"))+" svelte-1cjsccl")},m(e,r){l(e,n,r),s(n,a),s(n,i),s(n,g);for(let e=0;e<R.length;e+=1)R[e]&&R[e].m(g,null);s(n,m),s(n,p),s(p,v),s(v,w),s(v,y),s(v,k),s(p,$),s(p,x),s(x,M),s(x,V),s(x,D),s(p,j),S&&S.m(p,null),C||(T=[b(y,"click",t[11]),b(M,"click",t[4]),b(D,"click",t[3])],C=!0)},p(e,[t]){if(98&t){let n;for(_=Object.entries(e[1]),n=0;n<_.length;n+=1){const r=L(e,_,n);R[n]?R[n].p(r,t):(R[n]=O(r),R[n].c(),R[n].m(g,null))}for(;n<R.length;n+=1)R[n].d(1);R.length=_.length}"string"==typeof e[2]&&""!==e[2]?S?S.p(e,t):(S=A(e),S.c(),S.m(p,null)):S&&(S.d(1),S=null),1&t&&B!==(B=o("container "+(e[0]?"":"hide"))+" svelte-1cjsccl")&&d(n,"class",B)},i:e,o:e,d(e){e&&c(n),function(e,t){for(let n=0;n<e.length;n+=1)e[n]&&e[n].d(t)}(R,e),S&&S.d(),C=!1,r(T)}}}function H(e,t,n){let r=!1,a={},i={},o="";const s=e=>{n(2,o=e&&e in F?F[e]:"")},l=e=>{a[e]=!0};"alt"in window&&(alt.on("handling:open",(e=>{n(1,i=e),a={}})),alt.on("handling:setVisibility",(e=>{n(0,r=e)})));return[r,i,o,()=>{if(!("alt"in window))return;let e=Array.from(Object.keys(a)).reduce(((e,t)=>({[t]:i[t].value})),{});alt.emit("handling:update",e),a={}},()=>{"alt"in window&&(Object.keys(i).forEach((e=>{n(1,i[e].value=i[e].modelDefault,i)})),a={},alt.emit("handling:reset"))},s,l,e=>s(e),()=>s(null),e=>l(e),function(e){i[e].value=this.value,n(1,i)},()=>window.open("https://github.com/szkiddaj")]}return new class extends S{constructor(e){super(),R(this,e,H,E,i,{})}}({target:document.body,props:{name:"world"}})}();
//# sourceMappingURL=bundle.js.map
